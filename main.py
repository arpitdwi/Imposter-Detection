# -*- coding: utf-8 -*-
"""cv-fork-6-of-mies-t(7).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fqgjk4ulps4fb9n-Mg2F3vK3XNGPnMCa
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.model_selection import RandomizedSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score, confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.model_selection import RandomizedSearchCV, GridSearchCV
from datetime import datetime

import os
import gc
import time
import random
import os
import sys



# installing susi som 
!pip install susi

# import related functions
import susi
from susi.SOMPlots import plot_umatrix, plot_estimation_map

data_path = 'data.npy'
labels_path = 'labels.npy'

# np.save("data.npy", data)
# np.save("labels.npy", labels)

data = np.load(data_path)
labels = np.load(labels_path)

# from IPython.display import FileLinks
# FileLinks('.')

"""* **SUSi SOM**"""



target = labels.astype(int)
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size = 0.2)

# # initial experiments
# som = susi.SOMClassifier(
#     n_rows = 20, 
#     n_columns = 20,
#     n_iter_unsupervised=25000,
#     n_iter_supervised=25000,
#     random_state=42,
# )

# # %%time
# som.fit(X_train, y_train)
# y_pred = som.predict(X_test)
# print(som.score(X_test, y_test))

# print("Acc score : ", accuracy_score(y_test, y_pred))

# print("F1 score : ", f1_score(y_test, y_pred))

# print("Confusion Matrix : ", confusion_matrix(y_test, y_pred))

param_grid = {
    "n_rows": [10, 25, 50, 75, 100] ,
#     "n_columns": [10, 20, 40, 80, 100],,
    "n_iter_unsupervised" : [ 10000, 25000, 50000, 75000],
#     "n_iter_supervised" : [10000, 25000, 50000, 75000],
}
param_grid

now = datetime.now()
current_time = now.strftime("%H:%M:%S")
print("Current Time =", current_time)

# # %%time
# # grid seacrh over param_grid

# som = susi.SOMClassifier()
# # clf = RandomizedSearchCV(som, param_grid, verbose=1, n_jobs=-1)
# # clf.fit(X_train, y_train)
# # print(clf.best_params_)
# best = 0
# for n_rows in param_grid["n_rows"]:
#     for n_iter_unsupervised in param_grid["n_iter_unsupervised"]:
#         som = susi.SOMClassifier(
#                             n_rows = n_rows, 
#                             n_columns = n_rows, 
#                             n_iter_unsupervised = n_iter_unsupervised, 
#                             n_iter_supervised = n_iter_unsupervised, 
#                             random_state=42,
#         )
#         som.fit(X_train, y_train)
#         y_pred = som.predict(X_test)
#         now = datetime.now()
#         current_time = now.strftime("%H:%M:%S")
#         print("Current Time =", current_time)
#         print("for params : ", n_rows,  n_iter_unsupervised , "\nsom score : ", som.score(X_test, y_test))
#         print("acc : ", accuracy_score(y_test, y_pred))
#         print("f1 : ", f1_score(y_test, y_pred))
#         print("cm : ", pd.DataFrame(confusion_matrix(y_test, y_pred)))
#         print("\n\n\n")
        
#         curr = accuracy_score(y_test, y_pred)
#         if best < curr :
#             param = {"n_rows" : n_rows,
#                     "n_columns" : n_rows,
#                     "n_iter_unsupervised" : n_iter_unsupervised,
#                     "n_iter_supervised" : n_iter_unsupervised,
#                     }
#             best = curr

# kfold cross validaion with best params
# %%time
from sklearn.model_selection import KFold
n_splits = 5
kf = KFold(n_splits=n_splits,shuffle=True, random_state=42)


n_rows,  n_iter_unsupervised = 100, 200000



accuracy = 0
f1 = 0
recall = 0

for train_index, test_index in kf.split(data):
    print("TRAIN:", train_index, "TEST:", test_index)
    X_train, X_test = data[train_index, :], data[test_index, :]
    y_train, y_test = target[train_index], target[test_index]

    som = susi.SOMClassifier(
                        n_rows = n_rows, 
                        n_columns = n_rows, 
                        n_iter_unsupervised = n_iter_unsupervised, 
                        n_iter_supervised = n_iter_unsupervised, 
                        random_state=42,
    )
    som.fit(X_train, y_train)
    y_pred = som.predict(X_test)
    now = datetime.now()
    
    accuracy += accuracy_score(y_test, y_pred) /5;
    f1 += f1_score(y_test, y_pred) / 5;
    
    
    
    current_time = now.strftime("%H:%M:%S")
    print("Current Time =", current_time)
    print("for params : ", n_rows,  n_iter_unsupervised , "\nsom score : ", som.score(X_test, y_test))
    print("acc : ", accuracy_score(y_test, y_pred))
    print("f1 : ", f1_score(y_test, y_pred))
    print("cm : ", pd.DataFrame(confusion_matrix(y_test, y_pred)))
    print("\n\n\n")

print("Fianl Accuray over 5 folds : ", accuracy)
print("Fianl F1 score over 5 folds : ", f1)

# for plotting purpose



som = susi.SOMClassifier(
                    n_rows = n_rows, 
                    n_columns = n_rows, 
                    n_iter_unsupervised = n_iter_unsupervised, 
                    n_iter_supervised = n_iter_unsupervised, 
                    random_state=42,
)

som.fit(X_train, y_train)
y_pred = som.predict(X_test)

# plotting ...

nr = n_rows
nc = n_rows
t = som.bmus_
t3 = som.super_som_
wl_x = []
wl_y = []
for i in range(nr):
    for j in range(nc):
        wl_x.append(i)
        wl_y.append(j)

w_x = []
w_y = []
for i in t:
    w_x.append(i[0])
    w_y.append(i[1])
t3 = np.reshape(t3,(nr,nc))

w_x = np.array(w_x)
w_y = np.array(w_y)
wl_x = np.array(wl_x)
wl_y = np.array(wl_y)

yl = []
for i in t3:
    for j in i:
        yl.append(j)
yl = np.array(yl)


import matplotlib.pyplot as plt

colors = ['C0','C1']
label_names = {0:'Crewmate',1:'Imposter'}
plt.figure(figsize=(10, 9))
#plt.pcolor(som.distance_map().T, cmap='bone_r', alpha=.2)
#plt.colorbar()

for c in np.unique(y_train):
    idx_target = y_train==c
    plt.scatter(w_x[idx_target]+.5+(np.random.rand(np.sum(idx_target))-.5)*.8,
                w_y[idx_target]+.5+(np.random.rand(np.sum(idx_target))-.5)*.8, 
                s=50, c=colors[c], label=label_names[c])
plt.legend(loc='upper right')
plt.grid()
plt.savefig('som_seed_1.png')
plt.show()

plt.figure(figsize=(10, 9))
#plt.pcolor(som.distance_map().T, cmap='bone_r', alpha=.2)
#plt.colorbar()

for c in np.unique(yl):
    idx_target = yl==c
    plt.scatter(wl_x[idx_target],
                wl_y[idx_target], 
                s=50, c=colors[c], label=label_names[c])
plt.legend(loc='upper right')
plt.grid()
plt.savefig('som_seed_2.png')
plt.show()



